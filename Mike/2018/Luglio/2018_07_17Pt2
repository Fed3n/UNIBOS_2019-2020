Esercizio c.1: 
I baristi (tanti) prendono gli ordini (es. mezza pinta, 1 o 2 pinte) e riempiono i bicchieri. 

Quando un fusto e' vuoto avvertono i magazzinieri che prendono un nuovo fusto che contiene più di
cento pinte e lo sostituiscono, a questo punto il barista può completare il riempimento del bicchiere.

La vita di un barista del Delirium è:
    while True:
        (type, quantity) = get_order()
        delirium.pour(type, quantity)

La vita di un Magazziniere è:
    while True:
        type = delirium.isempty()
        capacity = change_keg(type)
        delirium.loaded(type, capacity)

Attenzione: se il fusto (keg) è quasi vuoto il barista dovrà riempire parzialmente il bicchiere, occorrerà attivare il magazziniere che
cambierà il fusto e poi il barista riempirà il bicchiere fino alla quantità richiesta dal cliente. 

Mentre un barista sta attendendo il cambiamento di un fusto altri baristi potrebbero ricevere ordini per lo stesso tipo di birra: 
gestire opportunamente questo caso. Scrivere il monitor Delirium.

monitor Delirium:
    int Birre[types]
    condition kegEmpty[types]
    bool isbeingRefilled[types], isWaiting[types]

    entry void pour(type, quantity):
        if(Birre[type] - quantity < 0):
            quantity -= Birre[type]
            Birre[type] = 0
            isWaiting[type] = True
            kegEmpty[type].wait()

        Birre[type] -= quantity
        quantity = 0

        if(Birre[type] > 0)
            kegEmpty[type].signal()

    entry type isempty():
        int i = 0
        while True:
            if(Birre[i] == 0 && !isbeingRefilled[i])
                isbeingRefilled[i] = True
                return i
            i++
            if(i > types)
                i=0

    entry void loaded(type, capacity):
        Birre[type] = capacity
        isbeingRefilled[type] = False

        if(isWaiting[type])
            kegEmpty[type].signal()

Esercizio c.2: Facendo uso di semafori, scrivere il codice di un servizio di buffer illimitato LIFO (con molteplici produttori e
consumatori)
producer: process[1,...,N] 
    while True: 
        value = produce() 
        lifobuf.push(value) 

consumer: process[1,...,M]
    while True:
        value = lifobuf.pop()
        process(value)

process lifobuf:
    semaphore_binary mutex(1)
    semaphore_binary ok2read(0),ok2write(0)
    int nr, nw
    stack buffer

    entry void push(value):
        nw++
        if(nw > 1)
            ok2write.P()
        buffer.push()
        
    entry value pop():
        
        value = buffer.pop()
        