Esercizio c.1: Scopo di questo esercizio è di scrivere un monitor mbuf che realizzi un buffer limitato dove ogni elemento venga inserito con una molteplicità. 
In particolare mbuf deve fornire le seguenti procedure entry:
    void add(type data, int n);
che inserisce il dato data con molteplicità n.
    type get(void);
che restituisce il primo dato disponibile.
Il monitor deve soddisfare i seguenti vincoli:
    • il buffer deve contenere al più MAXELEM elementi (ogni operazione add aggiunge un elemento
indipendentemente dalla molteplicità n)
    • i dati vengono consegnati in ordine FIFO
    • un dato inserito con molteplicità n deve essere ricevuto da n processi: il monitor deve attendere che n processi 
        chiamino (o abbiano chiamato) la get e a quel punto restituisce il dato a tutti e toglie l'elemento dal buffer.

monitor mbuf:
    buffere<pair<type,int>>
    int MAXELEM
    int n
    int nr
    condition ok2read, ok2write

    entry void add(data, molt):
        if(n >= MAXELEM)
            ok2write.wait()

        buffer.enqueue(data,molt)
        n++
        if(nr >= buffer.top().second)
            ok2read.signal()

    entry type get(void):
        nr++
        if(buffer.isEmpty() || nr < buffer.top().second)
            ok2read.wait()
        
        nr--
        type T = buffer.top().first
        buffer.top().second--
        
        if(buffer.top().second > 0)
            ok2read.signal()
        else
            q.dequeue()
            ok2write.signal()
        
        return T



Esercizio c.2:

p0 -> pre(0){FALSE} -> post(0){1, ok[1].signal} -> pre(0){FALSE} -> 
p1 -> pre(1){TRUE, ok[1].wait} -> post(1)(0, ok[0].signal) -> pre(1) {TRUE}

01

process bohm[i, i=0,1] {
    for (;;) {
        m.pre(i);
        print(i);
        m.post(i);
    }
}

monitor m:
    condition ok[2];
    state = 0;

    procedure entry pre(int n) {
        if (state != n)
            ok[n].wait();
    }

    procedure entry post(int n) {
        state = 1 - state;
        ok[state].signal()
    }



semaphore_binary mutex(1)
int value=0

process bohs[i, i=0, 1] {
    for (;;) {
        pre(i);
        print(i);
        post(i);
    }
}
void pre(int n) {
    if(value != n)
        mutex.P()
}
void post(int n) {
    value = 1 - value
    mutex.V()
}


Scopo di questo esercizio è di studiare il comportamento del programma composto dai processi bohm e dal monitor
m nella colonna di sinistra e di completare il programma sulla destra in modo che abbia lo stesso comportamento ma
usi i semafori al posto del monitor e che sia minimale in termini di numero di istruzioni e di variabili utilizzate.


Esercizio g.1: 
Sia dato in programma che elabori per x millisecondi, compia una operazione di I/O su uno specifico
device per y millisecondi quindi faccia una elaborazione finale per x millisecondi e termini.
Si eseguano tre istanze dello stesso programma su un sistema monoprocessore. I tre processi iniziano l'esecuzione al
tempo zero e accedono allo stesso device in modo mutualmente esclusivo: le richieste di I/O vengono gestite in
modalità FIFO.
Si confronti ora il comportamento di uno scheduler del processore round-robin con valore di time slice m e quello di
uno scheduler non preemptive a priorità statica (i tre processi hanno priorità diversa).
A quali condizioni e per quali valori di x, y e m i due scheduler si comportano nello stesso modo?

p = 3 + 6 + 3
p1 = 1, p2 = 2, p3 = 3
m = 3
R-R
   012345678901234567
p1 111999999222000000
p2 000111999999222000
p3 000000111999999222
S-T
   012345678901234567
p1 111999999222000000
p2 000111999999222000
p3 000000111999999222

------

p = 3 + 4 + 3
p1 = 1, p2 = 2, p3 = 3
m = 2
R-R
   012345678901234567
p1 110000199992200002
p2 0011000199990220002
p3 00001100199990022002
S-T
   012345678901234567
p1 111999900222000000
p2 000111999900222000
p3 000000111999900222

------

p = 2 5 2
p1 = 1, p2 = 2, p3 = 3
m = 2
R-R
   012345678901234567
p1 119999922
p2 00119999922
p3 0000119999922
S-T
   012345678901234567
p1 119999922
p2 00119999922
p3 0000119999922

------

p = 3 1 3
p1 = 1, p2 = 2, p3 = 3
m = 3
R-R
   012345678901234567
p1 111900000111
p2 000111900000111
p3 000000111900000111
S-T
   0123456789012345678
p1 1119002220000000000
p2 0001119002220000000
p3 0000000000002229222