Esercizio c.1: Scopo di questo esercizio è di scrivere un monitor mbuf 
che realizzi un buffer limitato dove ogni elemento venga inserito con una molteplicità. 
In particolare mbuf deve fornire le seguenti procedure entry:
    void add(type data, int n);
che inserisce il dato data con molteplicità n.
    type get(void);
che restituisce il primo dato disponibile.
Il monitor deve soddisfare i seguenti vincoli:
    • il buffer deve contenere al più MAXELEM elementi 
        (ogni operazione add aggiunge un elemento indipendentemente dalla molteplicità n)
    • i dati vengono consegnati in ordine FIFO
    • un dato inserito con molteplicità n deve essere ricevuto da n processi: 
        il monitor deve attendere che n processi chiamino (o abbiano chiamato) 
        la get e a quel punto restituisce il dato a tutti e toglie l'elemento dal buffer. 

monitor mbuf:
    int MAXELEM
    int CurrentElement
    int molteplicità[0,...,MAXELEM-1]
    queue buffer
    condition ok2add, ok2get
    
    entry set(int value):
        MAXELEM = value
    
    entry add(type data, int n):
        if(CurrentElement < MAXELEM)
            molteplicità[CurrentElement] = n
            while(n > 0):
                buffer.push(data)
                n--
            CurrentElement++
            ok2get.signal()
        else
            ok2add.Wait()

    entry get(void):
        if(CurrentElement <= 0)
            ok2get.wait()
        else
            if(molteplicità[CurrentElement-1] > 0):
                data = buffer.pop()
                molteplicità[CurrentElement-1] -= 1
            else
                CurrentElement++
                ok2add.signal()




Esercizio c.2:

process bohm[i, i=0,1] {
    for (;;) { //<---- while(true)
        m.pre(i);
        print(i);
        m.post(i);
    }
}

monitor m:{
    condition ok[2];
    state = 0;
    
    procedure entry pre(int n) {
        if (state != n)
            ok[n].wait();
    }

    procedure entry post(int n) {
        state = 1 - state;
        ok[state].signal()
    }
}

pre{0,0,false}, 0, post{0,1,ok[0].signal}, pre{0,1, ok[0].wait},  

..........

process bohs[i, i=0,1] {
    for (;;) {
        pre(i);
        print(i);
        post(i);
    }
}

void pre(int n) {
    ........
}

void post(int n) {
    ........
}
Scopo di questo esercizio è di studiare il comportamento del programma composto dai processi bohm e dal monitor
m nella colonna di sinistra e di completare il programma sulla destra in modo che abbia lo stesso comportamento ma
usi i semafori al posto del monitor e che sia minimale in termini di numero di istruzioni e di variabili utilizzate




Esercizio g.1: 
Sia dato in programma che elabori per x millisecondi, compia una operazione di I/O su uno specifico
device per y millisecondi quindi faccia una elaborazione finale per x millisecondi e termini.
Si eseguano tre istanze dello stesso programma su un sistema monoprocessore. I tre processi iniziano l'esecuzione al
tempo zero e accedono allo stesso device in modo mutualmente esclusivo: le richieste di I/O vengono gestite in
modalità FIFO.
Si confronti ora il comportamento di uno scheduler del processore round-robin con valore di time slice m e quello di
uno scheduler non preemptive a priorità statica (i tre processi hanno priorità diversa).
A quali condizioni e per quali valori di x, y e m i due scheduler si comportano nello stesso modo?

programma = 1+3+1, time-slice = 2
p1,p2,p3 

   01234567890123456789012345678901234567890
p1 1000100
p2 0100010
p3 0010001

   0123456
p1 1000100
p2 0100010
p3 0010001

p = 1+3+1
p1 = 1,p2 = 2,p3 = 3


