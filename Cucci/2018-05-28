Esercizio c.1: 
La struttura di sincronizzazione riempisvuota ha le seguenti caratteristiche:
-) entrano MAX processi, e fino a che non è piena nessun processo può uscire
-) i processi devono uscire in ordine inverso rispetto all'ordine di arrivo.

Quando un processo vuole usare la struttura riempisvuota chiama la seguente funzione:
    def riempisvuotasynch():
        riempisvuota.entra(getpid())
        riempisvuota.esci(getpid())
Scrivere il monitor riempisvuota.

monitor riempisvuota:
    stack buffer
    int MAX, current
    condition ok2Exit[MAX], ok2Enter

    entry entra(pid):
        if(current == MAX)
            ok2Enter.wait()
        current++
        buffer.push(pid)
        if(current < MAX)
            ok2Enter.signal()

    entry pid_t esci(pid):
        if(current < MAX)
            ok2Exit[buffer.top()].wait()

        isFull.signal()
        buffer.pop()
        current--
        

Esercizio c.2: 
In un sistema ci sono 26 processi server proc['a'], proc['b'] .... proc['z'] che usano message passing asincrono.
Ogni processo è l'unico che può stampare la propria lettera ed esegue il seguente codice:   

proc[x]: x='a',...,'z'      
    while True:         
        (c, string) = arecv(*)         
        print(x)         
        if (len(string) > 1)            
            asend(proc[string[0]], (x, string[1:]))

e i clienti che vogliono stampare una stringa (non vuota) usano la funzione:   

    def procstampa(s):      
        asend(proc[s[0]], (None, s))

Se un cliente alla volta chiama la procstampa il sistema produce il risultato voluto  ma se malauguratamente un cliente chiama la proc stampa mentre è in corso un'altra stampa 
l'output delle due operazioni può mischiarsi (se il primo cliente ha chiesto di stampare"ciao" e il secondo "mondo" l'output potrebbe essere "cmionadoo").

Senza aggiungere ulteriori processi e senza modificare il codice eseguito dai clienti correggere il codice dei server in modo che il programma concorrente funzioni correttamente in ogni caso 
(nell'esempio precedente venga stampato prima "ciao" e poi "mondo", o viceversa, ma ogni stringa venga interamente stampata prima che inizi la stampa della successiva).

queue = ""
proc[x]: x='a',...,'z'      
    while True:         
        (c, string) = arecv(*)         
        if(c == NULL)
            queue.append(x + string)
        print(queue[0])         
        if (len(string) > 1)            
            asend(proc[queue[0]], (x, queue[1:]))

Esercizio g.1: 
Ci siano in un sistema due processi P1 e P2 identici che iniziano contemporaneamente. 
Entrambi i processi computano per 4 ms, fanno I/O per 2 ms e poi elaborano nuovamente per 4 ms. 
L'I/O dei due processi avviene sulla stessa unita' con accesso FIFO. 
Il sistema usa uno scheduler di tipo round robin. 
Calcolare lo schedule per ogni scelta della lunghezza del quanto di tempo e quale sia la scelta (o siano le scelte) migliori. 
E quale è il limite massimo di durata dello schedule (considerando il time slice come numero reale positivo)?

p: 4ms+2ms+4ms
t-s= 1 ms
   01234567890123456
P1 1010101--20202020
P2 01010101--2020202

t-s= 2 ms
   0123456789012345
P1 110011--22002200
P2 00110011--220022

t-s= 3 ms
   01234567890123456
P1 1110001--22200020
P2 00011101--0022202

t-s= 4 ms
   0123456789012345
P1 1111--0022220000
P2 00001111--002222