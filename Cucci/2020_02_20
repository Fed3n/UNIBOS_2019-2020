
-----------------------------------------------------------------------------------

C1. Il monitor delay deve fornire tre procedure entry:
    boolean delay(unsigned int timeout);
    int count(void);
    void tick(void); 
    La funzione tick viene richiamata ad ogni millisecondo. 
    Un processo messo in attesa a causa di una delay attende per un numero di millisecondi (tick) indicato nel parametro.
    La procedure entry count deve restituire il numero di processi attualmente in attesa a causa di una delay.
    Scrivere delay.

monitor delay: {
    int timer; //giusto per dargli un senso
    int queue timers; //bella ordinata, come piace a noi
    int Ndelay;
    condition ok2go; 
    
    entry boolean delay(unsigned int timeout): {
        int new_process;
        if(timeout != 0){
            Ndelay++;
            new_process = timer + timeout;
            timers.enqueue(new_process);
            ok2go.wait();
            
            while(new_process>timer){
                ok2go.signal();
                timers.enqueue(new_process);
                ok2go.wait();
            }
            
            Ndelay--;
            return true;
        }
        return false;
    }

    entry int count(void): {
        return Ndelay;
    }

    entry void tick(void): {
        timer += 1;
        for(int i = 0; i< Ndelay ; i++){
            int t  = queue.top();
            if(t > timer){
                break;
            }
            queue.pop();
            ok2go.signal();
        } 
    }
}

-------------------------------------------------------------------------------------------------------

C2. Sia dato un sistema di processi a memoria privata che fornisca servizio di message passing asincrono.
    Siano date inoltre la funzione call4fun ed il processo server definite come segue:

def call4fun (x):      
    asend(server, (getpid(), x, 0, 1))    
    return(arecv(server))

process server:  
    forever:
        //(s = getpid, n = x, r = 0, v = 1)
        (s, n, r, v) = arecv(*)    
        if (n > 0)          
            asend(server, (s, n-1, r+v, v+2))    
        else       
            asend(s, r)

Cosa calcola la funzione call4fun e come viene calcolato questo valore?

X = 5;
(1000000, 5, 0 , 1)
(1000000, 4, 1 , 3)
(1000000, 3, 4 , 5)
(1000000, 2, 9 , 7)
(1000000, 1, 16 , 9)
(1000000, 0, 25 , 11)
R = 25

X = 2;
(1000000, 2, 0 , 1)
(1000000, 1, 1 , 3)
(1000000, 0, 4 , 5)
R = 4

r = 0, v =1
while(n>0){
    n--;
    r+=v;
    v+=2
}

riceve r

-------------------------------------------------------------------------------------------------------

G1. In un sistema ci sono 3 classi di risorse A, B, C e 4 processi p,q,r,s.
    In un determinato istante le tre risorse della classe A sono assegnate a p (due risorse) e a s(1 risorsa),  
    l'unica risorsa della classe B è assegnata ad r mentre le due risorse della classe C sono assegnate a q ed a r. 
    Sono pendenti le seguenti richieste: p ed s richiedono una risorsa della classe C e q chiede una risorsa della classe A.
    Lo stato così determinato è di deadock? Mostrare  il procedimento usato per ottenere la risposta.

https://drive.google.com/open?id=1O3DsmacAU0L9P2Hj2RKPtLfE8guEPVmsBa5sRJmpkMw