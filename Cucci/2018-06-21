Esercizio c.1: 
Per raggiungere un'isola con l'autovettura occorre un traghetto. 

Il traghetto di questo esercizio ha una sola rampa sulla quale può transitare una automobile alla volta.

Il traghetto può imbarcare al massimo MAX automobili. Il traghetto parte solo quando è completamente carico. 

Occorre disimbarcare tutte le auto prima di imbarcare quelle che desiderano fare la traversata in senso contrario. 

Le auto possono essere sbarcate in qualsiasi ordine purché una sola alla volta passi sulla rampa.

Il processo traghetto è il seguente:
 traghetto: process:
    while True:
        tmon.al_porto(TERRAFERMA)
        ... naviga
        tmon.al_porto(ISOLA)
        ... naviga

Mentre le auto per usare il traghetto chiamano uno dei due segmenti di codice:

 tmon.imbarca(TERRAFERMA)           tmon.imbarca(ISOLA)
 /* sulla rampa */                  /* sulla rampa */
 tmon.imbarcato(TERRAFERMA)         tmon.imbarcato(ISOLA)
 /* sulla nave */                   /* sulla nave */
 tmon.sbarca(ISOLA)                 tmon.sbarca(TERRAFERMA)
 /* sulla rampa */                  /* sulla rampa */
 tmon.sbarcato(ISOLA)               tmon.sbarcato(TERRAFERMA)

Scrivere il monitor tmon.

monitor tmon:
    int MAX #max automobili
    int current #current automobili
    condtion ok2imbarcare, ok2sbarcare, ok2Ramp
    type position #TERRAFERMA or ISOLA
    bool onRamp #a car is on the ramp

    entry al_porto(type):
        position = type
        while(current != 0):
            ok2sbarcare.signal()
        while(current != MAX):
            ok2imbarcare.signal()

        entry imbarca(type):
            if(type != position || current >= MAX)
                ok2imbarcare.wait()
            if(onRamp)
                ok2Ramp.wait()
            onRamp = True

        entry imbarcato(type):
            current++
            ok2Ramp.signal()
            onRamp = False

        entry sbarca(type):
            if(type != position || current <= 0)
                ok2sbarcare.wait()
            if(onRamp)
                ok2Ramp.wait()
            onRamp = True

        entry sbarcato(type):
            current--
            ok2Ramp.signal()
            onRamp = False


Esercizio c.2: 
Facendo uso di semafori ordinari implementare semafori a limite intero N che possano assumere valori
        -N, -N+1, ...,1, 0, 1, ..., N-1, N.

L'invariante dei semafori a limite intero di questo esercizio è:
        nP - N <= nV + init <= nP + N

dove nP è il numero di operazioni P completate, nV il numero delle operazioni V completate e init è il valore iniziale del semaforo.

process limitSem:
    semaphore_binary mutex(1)
    semaphore_binary sem(0)
    int current, N

    entry init(value):
        N = value
    
    entry P():
        mutex.P()
        current--
        if(current < -N):
            mutex.V()
            sem.P()
        mutex.V()

    entry V():
        mutex.P()
        current++
        if(current < N):
            mutex.V()
            sem.V()
        mutex.V()


Esercizio g.1: 
Costruire uno stato di un banchiere a tre valute in modo che sia unsafe.
Questo stato deve essere tale che aggiungendo una istanza (una unita' di valuta) di ogni valuta lo stato torni safe ma se si aggiungesse una unita' a solamente una o due valute rimarrebbe unsafe. 
Ricordarsi che, per ogni valuta, il fido concesso ad ogni cliente deve essere minore o uguale della dotazione totale del banchiere.

333-444-555

333 111 222
555 111 444
666 111 555