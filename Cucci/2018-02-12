Esercizio c.1: 
L'incrocio fra una strada e un canale è regolato da un ponte mobile come quello illustrato dall'apposito segnale.

Ovviamente le auto possono attraversare il ponte solo se è abbassato e si può alzare il ponte se non ci sono auto che lo stanno attraversando. 
Il ponte deve essere alzato per far passare le imbarcazioni.

Il canale in corrispondenza del ponte ha una larghezza che consente il passaggio contemporaneo di due
imbarcazioni, una per ogni senso di percorrenza, il ponte ha la portata massima di MAXCAR autoveicoli.

Le auto per attraversare il ponte usano il seguente protocollo:
    bridge.car_enter(direction)
    ... attraversa il ponte
    bridge.car_exit(direction)

Le imbarcazioni usano il protocollo:
    bridge.boat_enter(direction)
    ... passa sotto al ponte
    bridge.boat_exit(direction)

dove direction vale 0 o 1 per riconoscere le due diverse direzioni delle auto o delle imbarcazioni. 
Occorre scrivere la soluzione in modo da evitare casi di starvation.

monitor bridge:
    int MAXCAR, currentCar[2], currentBoat[direction]
    int boatWaiting, carWaiting
    condition okCar[direction], okBoat[direction]
    int isUp

    entry car_enter(direction):
        if(currentCar[direction] >= MAXCAR/2 || isUp):
            carWaiting++
            okCar[direction].wait()
            carWaiting--

        currentCar[direction]++

        if(boatWaiting <= 0 && carWaiting > 0)
            okCar[0].signal()
            okCar[1].signal()

    entry car_exit(direction):
        currentCar[direction]--
        
        if(currentCar[direction] + direction[1-direction] == 0 && boatWaiting > 0)
            isUp = TRUE
            okBoat.signal()
        if(boatWaiting <= 0)
            okCar[0].signal()
            okCar[1].signal()

    entry boat_enter(direction):
        if(currentBoat[direction] == 1 || !isUp):
            boatWaiting++   
            okBoat[direction].wait()
            boatWaiting--

        currentBoat[direction]++

        if(carWaiting <= 0 && boatWaiting > 0)
            okBoat[direction].signal()
            okBoat[1-direction].signal()

    entry boat_exit(direction):
        currentBoat[direction]--
        
        if(currentBoat[direction] + currentBoat[1-direction] == 0 && carWaiting > 0)
            isUp = FALSE
            okCar.signal()
        if(carWaiting <= 0)
            okBoat[direction].signal()
            okBoat[1-direction].signal()


Esercizio c.2: Sia dato un meccanismo di message passing asincrono. Un numero imprecisato di processi client possono spedire
messaggi (stringhe testuali) a N processi server (server0, …, servern-1). Quando un processo client vuole stampare un messaggio
sceglie a caso uno dei server e lo spedisce ad esso. Scopo dell'esercizio è di scrivere il codice dei processi server che garantiscano
che ogni processo stampi i messaggi da esso ricevuti ma se un client spedisce lo stesso messaggio (allo stesso server o a due server
diversi) il messaggio deve risultare stampato una sola volta da uno solo dei server che l'hanno ricevuto.
L’esercizio deve essere svolto senza aggiungere ulteriori processi


process server(0):
    dictionary <src,msg> Dit;
    while(1):
        (src, msg) = arcv(*)
        if(sender != NULL):
            for(int i = 1; i < N, i++)
                if(sender == server[i])
                    if(Dit(src) == msg)
                        asend(src, KO)
                    else
                        Dit(src).add(msg)
                        asend(src, OK)
                else 
                    if(Dit(src) != msg)
                    Dit(src).add(msg)
                    print(msg)

process server(1,...,N-1):
    while(1):
        (src,msg) = arcv(*)
        asend(server(0), (getpid(), msg))
        (src,msg)arcv(0)
        if(msg == OK)
            print(msg)
    
Esercizio g.1:
Considerare i seguenti processi gestiti mediante uno scheduler round robin con timeslice di 4ms su una macchina SMP:
Valuta A: COH=x                         Valuta B: COH=y
p1: credito=6 assegnati=4               credito=8 assegnati=5
p2: credito=6 assegnati=3               credito=3 assegnati=3
p3: credito=6 assegnati=2               credito=8 assegnati=4
Denotare l'insieme di tutti I valori (x, y) per i quali lo stato sopra indicato risulta safe.

p3 68   24  44
p2 63   33  30
p1 68   45  23

p1->p2->p3 23->68->9-11->11-15
p1->p3->p2 23->68->8-12->11-15
p2->p1->p3 30->63->10-8->12-12
p2->p3->p1 30->63->UNSAFE
p3->p1->p2 44->68->10-13->13-16
p3->p2->p1 44->68->9-11->13-16