Esercizio c.1: Scrivere il monitor lwlrbb. Il monitor deve implementare le seguenti procedure entry:

    void write(generic_type val);
    generic_type read(void);

Il lwlrbb si comporta come un bounded buffer di MAX elementi che coordina l'attivita' di numerosi processi produttori/scrittori e numerosi lettori/consumatori.

lwlrbb ammette un numero massimo (sempre MAX) di lettori e scrittori in attesa.

Se il buffer e' vuoto e ci sono piu' gia' MAX lettori in attesa, il lettore che e' in attesa da piu' tempo esce restituendo NULL.

In ugual modo se il buffer e' completamente pieno e ci sono gia' MAX scrittori che attendono di scrivere viene perduto il valore che da
piu' tempo nel buffer attende di venir letto, il primo processo in attesa di scrivere puo' cosi' scrivere il suo elemento nel buffer e sbloccarsi.


monitor lwlrbb:
    int MAX;
    int nr, nw;
    generic_type buffer[MAX];
    condition ok2read, ok2write;

    entry void write(generic_type val):
        nw++
        if(nw >= MAX && buffer.isFull()):
            buffer.remove()
            ok2write.signal()
            ok2write.wait()
        else if(nw > 2):
            ok2write.wait()

        buffer.insert(val)
        nr--
        ok2write.signal()

    generic_type read(void):
        nr++
        if(nr >= MAX && buffer.isEmpty()):
            ok2read.signal()
            ok2read.wait()
        else if(nr > 2):
            ok2read.wait()
            
        if(buffer.isEmpty()):
            nr--
            return NULL    
        generic_type c = buffer.remove()
        nr--
        ok2read.signal()
        return c


MAX = 3
buffer MAX = 3
6 writer
123456

monitor lwlrbb:

    condition write;
    condition read;
    int MAX
    generic_type queue buffer[MAX]
    int writer
    int reader

    void write(generic_type val):
        if buffer.is_full():
            if writer < MAX:
                writer++
                write.wait()
            else:
                buffer.pop()
                write.signal()
                write.wait()    
        writer--
        buffer.append(val)
        if reader > 0:
            reader.signal() 

    generic_type read():
        if buffer.is_empty():
            if reader < MAX:
                reader++
                read.wait()
            else:
                read.signal()
                read.wait()
        reader--
        return_val = buffer.pop()
        if writer > 1:
            writer. signal()
        return return_val

Esercizio c.2:

a) Si consideri la funzione atomica dualshift(a,b) che opera su due operandi di tipo byte passati per indirizzo. L'operazione fa lo shift a
destra dei due operandi. Il bit piu' significativo di a viene posto a zero, il bit piu' significativo di b diviene quello che all'atto della
attivazione di dualshift era il bit meno significativo di a.
es. se a vale 6 e b vale 4 dopo la chiamata di dualshift(a,b) a vale 3 e b 2. Se a vale 5 e b 6 dopo la chiamata dualshift (a,b) a vale 2
e b vale 131 (128+3).
La funzione dualshift puo' essere usata al posto della test&set per la sincronizzazione fra processi? Dimostrare la risposta.

dualshift a>>1
dualshift(a,b)
a=6,        b=4
0000.0110, 0000.0100
--------\/
0000.0011, 0000.0010
a=3,        b=2


a=5,        b=6
0000.0101, 0000.0110
--------\/
0000.0010, 1000.0011
a=2,        b=131

lock = 00000001
b    = 00000000

shared lock = 1
P,Q:
    b = 0
    do:
        dualshift(lock, b)
    while(b < 127)
    CS
    lock = 1
    NOT CS



b) Si consideri ora la funzione andor(a,b) che opera su due parametri di tipo booleano passati per indirizzo e cosi' definita:
    andor(a,b)=<c=a or b; b=a and b; a=c>
Puo' la funzione andor essere usata al posto della test&set per la sincronizzazione fra processi? Dimostrare la risposta.
Si ricorda che le operazioni di assegnazione di valori costanti a variabili vengono considerati atomici.

andor(a,b)
    c = a || b
    b = a && b
    a = c

OR:   AND:
ab c |ab c

00 0 |00 0
01 1 |01 0
10 1 |10 0
11 1 |11 1

0 0 == (a = 0, lock = 0)
0 1 == (a = 1, lock = 0)
1 0 == (a = 1, lock = 0)
1 1 == (a = 1, lock = 1)

shared lock = 1
P,Q:
    do:
        a = 0
        dualshift(a, lock)
    while(a != 0)
    CS
    lock = 1
    NOT CS


Esercizio g.1:
a) Sia data la seguente stringa di riferimenti: 123451234123121.
mostrare il comportamento degli algoritmi MIN e LRU quando operano su una memoria di 3 frame.

MIN:
    123451234123121
1   111111111111111
2    22222222222222
3     3455534443333

MIN:
    123451234123121
1   111444222111111
2    22255533322222
3     3331114443333

b) Data una memoria di 4 frame contenente la pagina 4 nel frame 1, la pagina 3 nel frame 2, la pagina 2 nel frame 3 e infine la
pagina 1 nel frame 4. Mostrare una stringa di riferimenti di un programma che usi 5 pagine (esiste la pagina 5 non ancora mappata in
memoria oltre alle 4 cariate nei frame) e che consenta alla fine dell'esecuzione di avere tutte le pagine nel frame di indice
corrispondente. La pagina 1 nel frame 1, la pagina 2 nel frame 2 e cosi' via.

    43215234152341234514231452134
1   44444444111111111111111111111
2    3333333333333333555555552222
3     222222222222222222233333333
4      15555555544444444444444444


a) Se un sistema ha una RAM molto ampia puo' non essere utile usare la memoria virtuale. In questo caso ha senso egualmente
usare la paginazione di memoria? Perche'?
b) Perche' i metodi di sincronizzazione tipo test&set (detti anche spinlock) assumono grande rilevanza nella scrittura di sistemi
operativi multiprocessore?
c) Confrontare gli alogritmi di scheduling roud robin e a priorita' statica. Indicare in quali casi sono da usare algoritmi di tipo round
robin e quando quelli a priorita' statica.