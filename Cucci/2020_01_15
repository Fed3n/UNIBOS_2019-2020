ESERCIZIO C1:
Il monitor "semaforo con timeout" semtimeout deve fornire tre procedure entry:
    void V(void)
    boolean P(unsigned int timeout)
    void tick(void)
Vale l'invariante dei semafori generali. 
La funzione tick viene richiamata ad ogni millisecondo. 
Un processo messo in attesa a causa di una P attende al massimo il numero di millisecondi indicato nel parametro.
Se un processo viene riattivato per timeout la P ritorna valore vero, altrimenti falso. Le operazioni V devono riattivare i
processi in attesa in ordine FIFO.
Scrivere semtimeout

monitor semtimeout:
    int value
    static boolean permit = false
    condition ok2go
    int timer

    entry boolean P(unsigned int timeout):
        timer = timeout
        value--
        if(value == 0)
            ok2go.wait()
        return permit

    entry void tick():
        timer--
        if(timer <= 0)
            ok2go.signal()


    entry void V():
        value++
        permit = true
        ok2go.signal()




ESERCIZIO C2:
Dato un servizio di message passing asincrono scrivere un servizio di message passing sincrono a spedizione multipla (senza fare uso di processi server).
Devono essere previste due funzioni:         
    mulsend (pid_t destination, T msg, int times)         
    T mulrecv (pid_t sender)  
La chiamata mulsend spedisce il messaggio msg al processo destination times volte. 
Solo quando il messaggio è stato ricevuto times volte da destination l'esecuzione della funzione mulsend viene completata. 
Il ricevente può indicare il valore zero come sender nella mulrecv per indicare che vuole ricevere un messaggio da qualsiasi mittente.

mulsend (pid_t destination, T msg, int times):
    src = GETPID()
    for(int i = 0; i < times; i++)
        asend((src,T), destination)
        ack = arecv(destination)

T mulrecv (pid_t sender):
    if(sender == 0)
        (src, msg = arecv(*)
        asend(src, ack)
    else
        msg = arecv(*)
        asend(sender, ack)
    return msg




Esercizio g.1: 
Si consideri l'algoritmo del banchiere a tre valute. 
Si prenda in considerazione una situazione nella quale tre processi p1, p2, p3 
abbiano un massimo credito disponibile rispettivamente di (3, 2, 3), (3, 3, 2), (2, 3, 3), 
cioé per esempio p1 può prendere in prestito 3 unità della prima e della terza valuta ma solo 2 della seconda. 
In un certo istante p1 ha 2 unità della prima valuta, p2 ha 2 unità della seconda, 
p3 ha 3 unità della terza e nessuna altra risorsa è stata assegnata. 
Qual è il capitale iniziale minimo che consente allo stato di essere safe? (considerare tutti i casi possibili e spiegare bene il procedimento?)

    C         L       N
p3 2 3 3    0 0 3   2 3 0
p2 3 3 2    0 2 0   3 1 2
p1 3 2 3    2 0 0   1 2 3

p1->p2->p3  1 2 3   ->  3 2 3   ->  3 4 3   ->  3 4 6
p1->p3->p2  1 3 3   ->  3 3 3   ->  3 3 6   ->  3 5 6
p2->p1->p3  3 1 3   ->  3 3 3   ->  5 3 3   ->  5 3 6
p2->p3->p1  3 1 2   ->  3 3 2   ->  3 3 5   ->  5 3 5
p3->p1->p2  2 3 0   ->  2 3 3   ->  4 3 3   ->  4 6 3
p3->p2->p1  3 3 0   ->  3 3 3   ->  3 5 3   ->  5 5 3

