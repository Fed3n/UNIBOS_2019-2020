C1.
Scrivere il monitor lwlrbb. Il monitor deve implementare le seguenti procedure entry:     
    void write(generic_type val);     
    
    generic_type read(void);
    
Il lwlrbb si comporta come un bounded buffer di MAX elementi che coordina l'attivita' di numerosi processi produttori/scrittori e numerosi lettori/consumatori. 
lwlrbb ammette un numero massimo (sempre MAX) di lettori e scrittori in attesa.
Se il buffer e' vuoto e ci sono piu' gia' MAX lettori in attesa, il lettore che e' in attesa da piu' tempo esce resituendo NULL.
In ugual modo se il buffer e' completamente pieno e ci sono gia' MAX scrittori che attendono di scrivere viene perduto il valore che da piu' tempo nel buffer attende 
di venir letto, il primo processo in attesa di scrivere puo' cosi' scrivere il suo elemento nel buffer esbloccarsi.


monitor lwlrbb:

    condition write;
    condition read;
    int MAX
    generic_type queue buffer[MAX]
    int writer
    int reader


    void write(generic_type val):
    
        if buffer.is_full():

            if writer < MAX:

                writer++
                write.wait()

            else:

                buffer.pop()
                write.signal()
                write.wait()
            
            writer--
            
        buffer.append(val)

        if reader > 0:

            reader.signal() 

    generic_type read():

        if buffer.is_empty():

            if reader < MAX:

                reader++
                read.wait()

            else:

                read.signal()
                read.wait()
            
            reader--
        
        return_val = buffer.pop()

        if writer > 1:

            writer. signal()

        return return_val



C2.
a) Si consideri la funzione atomica dualshift(a,b) che opera su due operandi di tipo byte passati per indirizzo. 
L'operazione fa lo shift adestra dei due operandi. 
Il bit piu' significativo di a viene posto a zero, il bit piu' significativo di b diviene quello che all'atto della attivazione di dualshift era il bit meno 
significativo di a.
es. se a vale 6 e b vale 4 dopo la chiamata di dualshift(a,b) a vale 3 e b 2. Se a vale 5 e b 6 dopo la chiamata dualshift (a,b) a vale 2 e b vale 131 (128+3).
La funzione dualshift puo' essere usata al posto della test&set per la sincronizzazione fra processi? Dimostrare la risposta.

b) Si consideri ora la funzione andor(a,b) che opera su due opera su due parametri di tipo booleano passati per indirizzo e cosi' definita:
andor(a,b)= <c=a or b; b=a and b; a=c>
Puo' la funzione andor essere usata al posto della test&set per la sincronizzazione fra processi? Dimostrare la risposta.
Si ricorda che le operazioni di assegnazione di valori costanti a variabili vengono considerati atomici.

test&set(a, b) = <a = b, b = 1>

bool lock = false;
while(ts(&lock)) 
    sezione critica 
    lock = false
    non sezione critica 


bool Test-and-Set(bool *target){
   bool val;
   val = *target;
   *target = TRUE;
   return val;
}
int dualshift(a, b){
    temp = a
    a << 1
    b << 1  
    a[8] = 0
    b[8] = temp[1]
}



g1.
a) Sia data la seguente stringa di riferimenti: 123451234123121.
mostrare il comportamento degli algoritmi MIN e LRU quando operano su una memoria di 3 frame.
b) Data una memoria di 4 frame contenente la pagina 4 nel frame 1, la pagina 3 nel frame 2, la pagina 2 nel frame 3 e infine la pagina 1 nel frame 4. 
Mostrare una stringa di riferimenti di un programma che usi 5 pagine (esiste la pagina 5 non ancora mappata in memoria oltre alle 4 cariate nei frame) e che consenta 
alla fine dell'esecuzione di avere tutte le pagine nel frame di indice corrispondente. 
La pagina 1 nel frame 1, la pagina 2 nel frame 2 e cosi' via.


a)
MIN
  123451234123121
1 111111111111111
2  22222222222222
3   3455534443333

LRU
  123451234123121
1 111444222111111
2  22255533322222
3   3331114443333

b)
MIN
   54321532432151342154312341234...  
1 444441111111111111111111111111 
2 333333333333333332222222222222
3 222222222222255555555333333333
4 155555555444444444444444444444

LRU
   1234523145212431234123412341234
1 44444444111111111111111111111111
2 33333333333222222222222222222222
3 22222222225555533333333333333333
4 11111555544444444444444444444444

